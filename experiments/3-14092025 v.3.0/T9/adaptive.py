# adaptive.py
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–µ—Å—Ç–Ω–∏—Ü–µ–π —É—Ä–æ–≤–Ω–µ–π (–∞–≤—Ç–æ-—Å—Ç–æ–ø, –ø–æ–¥—É—Ä–æ–≤–Ω–∏, —Ñ–∏–Ω–∞–ª—å–Ω—ã–π stress-test)

import numpy as np
from level import run_level
from stress import stress_test


def adaptive_run(cfg, root):
    hotspots = []
    level = 0
    prev_metrics = None
    max_levels = cfg["adaptive"].get("max_levels", 15)

    while level < max_levels:
        hotspots, metrics = run_level(level, hotspots, cfg, root)
        median_persistence, avg_purity, median_gap = metrics

        # --- –°–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç ---
        print(f"üìä Summary L{level}:")
        print(f"   median persistence = {median_persistence:.3f}")
        print(f"   avg purity         = {avg_purity:.3f}")
        print(f"   median gap_ratio   = {median_gap:.3f}")

        # --- –ê–≤—Ç–æ-—Å—Ç–æ–ø ---
        if not hotspots or len(hotspots) < cfg["hotspots"].get("K_min", 20):
            print(f"‚èπÔ∏è Auto-stop: –º–∞–ª–æ —Ç–æ—á–µ–∫ ({len(hotspots)})")
            break

        if prev_metrics:
            dp = abs(median_persistence - prev_metrics[0])
            dq = abs(avg_purity - prev_metrics[1])
            if dp < 0.02 and dq < 0.02:
                print(f"‚èπÔ∏è Auto-stop: —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è (Œîpers={dp:.3f}, Œîpur={dq:.3f})")
                break

        prev_metrics = (median_persistence, avg_purity, median_gap)

        # --- –ü–æ–¥—É—Ä–æ–≤–Ω–∏ ---
        if len(hotspots) > 2000:
            print(f"‚Ü≥ Sub-level triggered at Level {level}")
            hotspots, metrics = run_level(level, hotspots, cfg, root, sublevel="a")
            median_persistence, avg_purity, median_gap = metrics
            print(f"üìä Summary L{level}a:")
            print(f"   median persistence = {median_persistence:.3f}")
            print(f"   avg purity         = {avg_purity:.3f}")
            print(f"   median gap_ratio   = {median_gap:.3f}")
            prev_metrics = metrics

        level += 1

    # --- –§–∏–Ω–∞–ª—å–Ω—ã–π stress-test (–µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω –≤ –∫–æ–Ω—Ñ–∏–≥) ---
    stress_cfg = cfg.get("stress", {})
    if stress_cfg.get("enabled", False):
        print("\nüö® –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ stress-test ...")
        try:
            stress_test(hotspots, cfg, root, level_tag=f"L{level}")
        except Exception as e:
            print(f"[stress] –æ—à–∏–±–∫–∞: {e}")


def stress_only_run(cfg, root):
    """–†–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ stress-test –¥–ª—è –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é —É–∑–ª–æ–≤"""
    hotspots = cfg.get("hotspots_manual", [])
    stress_test(hotspots, cfg, root, level_tag="manual")
